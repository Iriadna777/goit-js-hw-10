{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nlet countdownTimer = null;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        if (selectedDates[0] < new Date()) {\n            iziToast.error({\n                title: 'Error',\n                message: 'Please choose a date in the future',\n            });\n            startButton.disabled = true;\n        } else {\n            startButton.disabled = false;\n        }\n    },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', () => {\n    startButton.disabled = true;\n    datetimePicker.disabled = true;\n\n    countdownTimer = setInterval(() => {\n        const currentTime = new Date();\n        const selectedTime = new Date(datetimePicker.value);\n        const timeDifference = selectedTime - currentTime;\n\n        if (timeDifference <= 0) {\n            clearInterval(countdownTimer);\n            iziToast.success({\n                title: 'Done',\n                message: 'Countdown finished!',\n            });\n            datetimePicker.disabled = false;\n            return;\n        }\n\n        updateTimerDisplay(timeDifference);\n    }, 1000);\n});\n\nfunction updateTimerDisplay(time) {\n    const { days, hours, minutes, seconds } = convertMs(time);\n    document.querySelector('[data-days]').textContent = addLeadingZero(days);\n    document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n    document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n    document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}"],"names":["datetimePicker","startButton","countdownTimer","options","selectedDates","iziToast","flatpickr","currentTime","timeDifference","updateTimerDisplay","time","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACzD,IAAIC,EAAiB,KAErB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACfA,EAAc,CAAC,EAAI,IAAI,MACvBC,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACzB,CAAa,EACDJ,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE9B,CACL,EAEAK,EAAUN,EAAgBG,CAAO,EAEjCF,EAAY,iBAAiB,QAAS,IAAM,CACxCA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BE,EAAiB,YAAY,IAAM,CAC/B,MAAMK,EAAc,IAAI,KAElBC,EADe,IAAI,KAAKR,EAAe,KAAK,EACZO,EAEtC,GAAIC,GAAkB,EAAG,CACrB,cAAcN,CAAc,EAC5BG,EAAS,QAAQ,CACb,MAAO,OACP,QAAS,qBACzB,CAAa,EACDL,EAAe,SAAW,GAC1B,MACH,CAEDS,EAAmBD,CAAc,CACpC,EAAE,GAAI,CACX,CAAC,EAED,SAASC,EAAmBC,EAAM,CAC9B,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EACxD,SAAS,cAAc,aAAa,EAAE,YAAcM,EAAeL,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcK,EAAeJ,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcI,EAAeH,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcG,EAAeF,CAAO,CACjF,CAEA,SAASC,EAAUE,EAAI,CAMnB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,SAASE,EAAeE,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}